#ifndef __OMOKOBJ_MANAGE_H__
#define __OMOKOBJ_MANAGE_H__

#include "omokobj.h"

/**
* @file omokobj_manage.h
* 
*	[파일 개요]
* 오목 프로그램 객체를 관리(설정, 생성, 제거 등)하는 함수를 정의함 
*/

/*
* [객체 설정(set) 함수]
* 객체 설정 계열 함수는 객체를 주어진 인자로 설정하는 역할을 담당함
* '동적 할당이 필요한 멤버'가 있는 객체는 반드시 객체 사용 후 delete 함수를 호출해야 함
* 
* 이름				: set_객체()
* 첫 매개변수		: 설정할 객체의 주소값
* 그 외 매개변수		: 설정값(멤버 변수와 일대일 대응)
* 반환값				: 설정이 잘 이루어졌으면 1, 그렇지 않으면 0을 반환
*/ 

/* 
* [객체 생성(_) 함수]
* 객체 생성 계열 함수는 객체 멤버 변수와 일대일 대응 되는 주어진 인자를 통해 객체를 생성해 반환하는 역할을 담당함
* '동적 할당이 필요한 멤버'가 있는 객체는 반드시 객체 사용 후 해당 객체의 delete 함수를 호출해야 함
* 
* 이름				: _객체()
* 매개변수			: 설정값(멤버 변수와 일대일 대응)
* 반환값				: 생성된 객체 반환
*/

/**
* [객체 유효성(valid) 검사 함수]
* 객체 유효성 검사 계열 함수는 객체가 유효한 값으로 초기화됐는지
* 검사하거나 '동적 할당이 필요한 멤버'가 있는 객체가 
* 유효한 동적 할당이 되어 있는지 검사하는 역할을 담당함
* 
* 이름				: valid_객체()
* 매개변수			: 유효성 검사할 객체의 주소값
* 반환값				: 객체가 유효하면 1, 그렇지 않으면(NULL 등) 0 반환
*/

/* 
* [객체 제거(delete) 함수]
* 객체 제거 계열 함수는 '동적 할당이 필요한 멤버'가 있는 객체가 '객체 생성 또는 설정 함수'를 통해 동적 할당 된 후
* 더 이상 코드에서 사용하지 않을 때 동적 할당된 메모리를 해제하는 역할을 담당함
* 
* 이름				: delete_객체()
* 첫 매개변수		: 제거할 객체의 주소값
* 그 외 매개변수		: 없음
* 반환값				: 객체 제거가 성공하면 1, 실패하거나 객체 내부 동적 할당 메모리 포인터가 NULL인 경우 0을 반환
*/ 

/* 
* [객체 복사(copy) 함수]
* 객체 복사 계열 함수는 객체의 내용을 같은 타입의 객체에 복사하는 역할을 담당함
* 
* 이름				: copy_객체()
* 첫 매개변수		: 복사할 객체의 주소값
* 그 외 매개변수		: 없음
* 반환값				: 지역 변수 형태의 복사된 객체(create 함수가 있는 객체는 깊은 복사 수행됨)
*/

/*
* [객체 변환(_to_) 함수]
* 객체 변환 계열 함수는 변환할객체를 변환될객체로 변환하는 역할을 담당함
* 이때 객체 복사가 수행되며 복사된 객체가 리턴됨
*
* 이름				: 변환할객체_to_변환된객체()
* 첫 매개변수		: 변환할객체의 주소값
* 그 외 매개변수		: 없음
* 반환값				: 지역변수 형태의 변환된객체(create 함수가 있는 변환될객체는 깊은 복사 수행됨)
*/

/*********************** 본문 ***************************/


/*******************************************
*		OmokCoord management
********************************************/

/**
* @brief OmokCoord 객체 설정
* @param OmokCoord* obj	: 설정할 객체의 주소값
* @param char row		: 설정할 행 정보, 범위: 'A' ~ 'Z', 인자가 잘못되면 '\\0'으로 초기화 후 0 반환
* @param short col		: 설정할 열 정보, 범위: 1 ~ 19, 인자가 잘못되면 0으로 초기화 후 0 반환
* @return int			: 설정이 잘 이루어졌으면 1, 그렇지 않으면 0을 반환
*
* @author lja3723
* @date 2020-11-25 01:10
* @version 0.0.1
*/
int set_OmokCoord(OmokCoord* obj, char row, short col);

/**
* @brief OmokCoord 객체 생성
* @param char row		: 설정할 행 정보, 범위: 'A' ~ 'Z', 인자가 잘못되면 '\\0'으로 초기화
* @param short col		: 설정할 열 정보, 범위: 1 ~ 19, 인자가 잘못되면 0으로 초기화
* @return OmokCoord		: 생성된 객체 반환
*
* @author lja3723
* @date 2020-11-25 12:10
* @version 0.0.1
*/
OmokCoord _OmokCoord(char row, short col);

/**
* @brief 문자열을 OmokCoord 로 변환
* @param const char* str	: 형식은 "a19" 또는 "A19" 이어야 함. 인자가 잘못되면 row는 '\\0', col은 0으로 초기화
* @return OmokCoord			: 생성된 객체 반환
*
* @author lja3723
* @date 2020-11-25 12:20
* @version 0.0.1
*/
OmokCoord Str_to_OmokCoord(const char* str);

/**
* @brief OmokCoord 객체 유효성 검사
* @param OmokCoord* obj	: 유효성 검사할 객체의 주소값
* @return OmokCoord		: 생성된 객체 반환
*
* @author lja3723
* @date 2020-11-25 12:10
* @version 0.0.1
*/
int valid_OmokCoord(OmokCoord* obj);



/*******************************************
*		StoneType management
********************************************/

/**
* @brief 문자열을 StoneType으로 변환
* @param const char* str	: 변환할 문자열
* @return StoneType			: Black 또는 White 반환, 변환 오류시 ERR_ST 반환
*
* @author lja3723
* @date 2020-11-25 01:25
* @version 0.0.1
*/
StoneType Str_to_StoneType(const char* str);

/**
* @brief StoneType 객체 유효성 검사
* @param StoneType* obj		: 유효성 검사할 객체의 주소값
* @return int				: 객체가 유효하면 1, 그렇지 않으면 0 반환
*
* @author lja3723
* @date 2020-11-25 12:15
* @version 0.0.1
*/
int valid_StoneType(StoneType* obj);

/**
* @brief 문자열을 StringType으로 변환
* @param int val			: 변환할 정수형 값
* @return StoneType			: Black 또는 White 반환, 변환 오류시 ERROR 반환
* 
* @author lja3723
* @date 2020-11-25 01:25
* @version 0.0.1
*/
StoneType Int_to_StoneType(int val);


/*******************************************
*		OmokCursor management
********************************************/






/*******************************************
*		Stone management
********************************************/






/*******************************************
*		StoneNode management
********************************************/






/*******************************************
*		StoneStorage management
********************************************/






/*******************************************
*		OmokPanelType management
********************************************/






/*******************************************
*		OmokPanel management
********************************************/






/*******************************************
*		OmokStatus management
********************************************/







/*******************************************
*		Omok management
********************************************/






/*********************** /본문 ***************************/
#endif